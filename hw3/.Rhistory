library(pls) # for PCA
library(textir) #needed for standardizing data
library(randomForest)
library(modelr)
library(purrr)
#predictions
predicts=predict(model_fit, CAhousing_test))
#predictions
predicts=predict(model_fit, CAhousing_test)
head(model_fit)
model_fit=map(CAhousing_folds$train, ~lm(medianHouseValue ~ longitude + latitude + housingMedianAge +
totalRooms + totalBedrooms + population + households + medianIncome +
longitude:latitude + longitude:housingMedianAge + longitude:totalRooms +
longitude:totalBedrooms + longitude:population + longitude:households +
longitude:medianIncome + latitude:housingMedianAge + latitude:totalRooms +
latitude:totalBedrooms + latitude:population + latitude:households +
latitude:medianIncome + housingMedianAge:totalBedrooms +
housingMedianAge:population + housingMedianAge:households +
totalRooms:totalBedrooms + totalRooms:population + totalRooms:households +
totalRooms:medianIncome + totalBedrooms:population + totalBedrooms:households +
totalBedrooms:medianIncome + population:medianIncome, data = .))
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
library(knitr)
library(dplyr)
library(gridExtra)
library(ggplot2)
library(ggthemes)
library(cowplot)
library(moments)
library(caret)
library(glmnet)
library(kableExtra)
library(olsrr)
library(ggmap)
library(skimr)
library(RColorBrewer)
library(plotly)
library(readr)
library(caret)
library(lmtest)
library(nortest)
library(scales)
library(rsample)
library(rpart)
library(rpart.plot)
library(pls) # for PCA
library(textir) #needed for standardizing data
library(randomForest)
library(modelr)
library(purrr)
CAhousing <- read.csv("C:/Users/anuka/Desktop/Spring 2021/ECO 395M - DATA MINING/Data/CAhousing.csv")
dim<-dim(CAhousing)
dim[1]
dim[2]
# we see that there are 20640 houses with 9 given characteristics
#data cleaning
skim(CAhousing)
#By looking at data we see that there are no missing varialbes and data looks clean so we can start analysis.
#create map
plot_map = ggplot(CAhousing,
aes(x = longitude, y = latitude, color = medianHouseValue,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Median House Value (in $USD)", size = "Population")
plot_map
#Train test splits with X-validation
set.seed(420)
CAhousing_split=initial_split(CAhousing, prop=0.8,strata=medianHouseValue)
CAhousing_train=training(CAhousing_split)
CAhousing_test=testing(CAhousing_split)
#Kfold
CAhousing_folds=crossv_kfold(CAhousing_train, k=10)
#or
control<-trainControl(method="cv",number=10)
full_model = lm(medianHouseValue ~ ., data = CAhousing_train)
full_model_adjr2 = summary(full_model)$adj.r.squared
full_twoway_model = lm(medianHouseValue ~ (.)^2, data = CAhousing_train)
full_twoway_adjr2 = summary(full_twoway_model)$adj.r.squared
full_threeway_model = lm(medianHouseValue ~ (.)^3, data = CAhousing_train)
full_threeway_adjr2 = summary(full_threeway_model)$adj.r.squared
beginning_mods_results = data.frame(
"Total Predictors" =
c("Full Model" = extractAIC(full_model)[1],
"Two-Way Int. Model" = extractAIC(full_twoway_model)[1],
"Three-Way Int. Model" = extractAIC(full_threeway_model)[1]),
"AIC" =
c("Full Model" = extractAIC(full_model)[2],
"Two-Way Int. Model" = extractAIC(full_twoway_model)[2],
"Three-Way Int. Model" = extractAIC(full_threeway_model)[2]),
"Adj R-Squared" =
c("Full Model" = full_model_adjr2,
"Two-Way Int. Model" = full_twoway_adjr2,
"Three-Way Int. Model" = full_threeway_adjr2))
kable(beginning_mods_results, align = c("c", "r"))
lm0=lm(medianHouseValue~1, data=CAhousing_train)
#full_model AIC vs BIC
step_full_mod_finish_aic =  stats::step(lm0, direction = "forward", scope=~(longitude+latitude+housingMedianAge+totalRooms+totalBedrooms+population+
households+medianIncome+medianHouseValue)^2)
#2way model AIC vs BIC
step_twoway_mod_finish_aic = stats:: step(full_twoway_model, direction = "both", scope=~(.))
aic_results = data.frame(
"AIC" =
c("Step" =
c("full" = extractAIC(step_full_mod_finish_aic)[2],
"Two-Way" = extractAIC(step_twoway_mod_finish_aic)[2],
"Three-way" = extractAIC(full_threeway_model)[2])))
kable(aic_results)
length(coef(step_twoway_mod_finish_aic))
length(coef(full_threeway_model))
#predict simultaneously on train set and test set with K-fold cross validation
#predict on test_data
model_fit=map(CAhousing_folds$train, ~lm(medianHouseValue ~ longitude + latitude + housingMedianAge +
totalRooms + totalBedrooms + population + households + medianIncome +
longitude:latitude + longitude:housingMedianAge + longitude:totalRooms +
longitude:totalBedrooms + longitude:population + longitude:households +
longitude:medianIncome + latitude:housingMedianAge + latitude:totalRooms +
latitude:totalBedrooms + latitude:population + latitude:households +
latitude:medianIncome + housingMedianAge:totalBedrooms +
housingMedianAge:population + housingMedianAge:households +
totalRooms:totalBedrooms + totalRooms:population + totalRooms:households +
totalRooms:medianIncome + totalBedrooms:population + totalBedrooms:households +
totalBedrooms:medianIncome + population:medianIncome, data = .))
#map the RMSE calculations over the trained models and test sets simultaneously
errors<-map2_dbl(model_fit, CAhousing_folds$test, modelr::rmse)%>%mean()
print(errors)
#predictions
predicts=predict(model_fit, CAhousing_test)
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude, color = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
plot_map
model_fit=map(CAhousing_folds$train, ~lm(medianHouseValue ~ longitude + latitude + housingMedianAge +
totalRooms + totalBedrooms + population + households + medianIncome +
longitude:latitude + longitude:housingMedianAge + longitude:totalRooms +
longitude:totalBedrooms + longitude:population + longitude:households +
longitude:medianIncome + latitude:housingMedianAge + latitude:totalRooms +
latitude:totalBedrooms + latitude:population + latitude:households +
latitude:medianIncome + housingMedianAge:totalBedrooms +
housingMedianAge:population + housingMedianAge:households +
totalRooms:totalBedrooms + totalRooms:population + totalRooms:households +
totalRooms:medianIncome + totalBedrooms:population + totalBedrooms:households +
totalBedrooms:medianIncome + population:medianIncome, data = .))
model_fit
#predictions
predicts=predict(model_fit, CAhousing_test)
head(predicts)
model_fit=map(CAhousing_folds$train, ~lm(medianHouseValue ~ longitude + latitude + housingMedianAge +
totalRooms + totalBedrooms + population + households + medianIncome +
longitude:latitude + longitude:housingMedianAge + longitude:totalRooms +
longitude:totalBedrooms + longitude:population + longitude:households +
longitude:medianIncome + latitude:housingMedianAge + latitude:totalRooms +
latitude:totalBedrooms + latitude:population + latitude:households +
latitude:medianIncome + housingMedianAge:totalBedrooms +
housingMedianAge:population + housingMedianAge:households +
totalRooms:totalBedrooms + totalRooms:population + totalRooms:households +
totalRooms:medianIncome + totalBedrooms:population + totalBedrooms:households +
totalBedrooms:medianIncome + population:medianIncome, data = .))
#map the RMSE calculations over the trained models and test sets simultaneously
errors<-map2_dbl(model_fit, CAhousing_folds$test, modelr::rmse)%>%mean()
print(errors)
#predictions
predicts=predict(model_fit, CAhousing_test)
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude, color = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
plot_map
length(coef(predicts))
glimpse(predicts)
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude, fill = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
plot_map
length(predicts)
length(CAhousing_test)
coefficients(CAhousing_test)
names(predicts)
names(CAhousing_test)
model_fit=map(CAhousing_folds$train, ~lm(medianHouseValue ~ longitude + latitude + housingMedianAge +
totalRooms + totalBedrooms + population + households + medianIncome +
longitude:latitude + longitude:housingMedianAge + longitude:totalRooms +
longitude:totalBedrooms + longitude:population + longitude:households +
longitude:medianIncome + latitude:housingMedianAge + latitude:totalRooms +
latitude:totalBedrooms + latitude:population + latitude:households +
latitude:medianIncome + housingMedianAge:totalBedrooms +
housingMedianAge:population + housingMedianAge:households +
totalRooms:totalBedrooms + totalRooms:population + totalRooms:households +
totalRooms:medianIncome + totalBedrooms:population + totalBedrooms:households +
totalBedrooms:medianIncome + population:medianIncome, data = CAhousing_train))
#map the RMSE calculations over the trained models and test sets simultaneously
errors<-map2_dbl(model_fit, CAhousing_folds$test, modelr::rmse)%>%mean()
print(errors)
#predictions
predicts=predict(model_fit, CAhousing_test)
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude, fill = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
plot_map
list(errors)
head(predicts)
length(predicts)
length(CAhousing_folds$train)
length(CAhousing_folds$test)
length(CAhousing_test)
plot_map = ggplot(CAhousing_folds$test,
aes(x = longitude, y = latitude, fill = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
head(CAhousing_folds$test)
df<-CAhousing_folds$test
plot_map = ggplot(df,
aes(x = longitude, y = latitude, fill = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
model_fit=map(lm(medianHouseValue ~ longitude + latitude + housingMedianAge +
totalRooms + totalBedrooms + population + households + medianIncome +
longitude:latitude + longitude:housingMedianAge + longitude:totalRooms +
longitude:totalBedrooms + longitude:population + longitude:households +
longitude:medianIncome + latitude:housingMedianAge + latitude:totalRooms +
latitude:totalBedrooms + latitude:population + latitude:households +
latitude:medianIncome + housingMedianAge:totalBedrooms +
housingMedianAge:population + housingMedianAge:households +
totalRooms:totalBedrooms + totalRooms:population + totalRooms:households +
totalRooms:medianIncome + totalBedrooms:population + totalBedrooms:households +
totalBedrooms:medianIncome + population:medianIncome, data =CAhousing_folds$train))
model_fit=lm(medianHouseValue ~ longitude + latitude + housingMedianAge +
totalRooms + totalBedrooms + population + households + medianIncome +
longitude:latitude + longitude:housingMedianAge + longitude:totalRooms +
longitude:totalBedrooms + longitude:population + longitude:households +
longitude:medianIncome + latitude:housingMedianAge + latitude:totalRooms +
latitude:totalBedrooms + latitude:population + latitude:households +
latitude:medianIncome + housingMedianAge:totalBedrooms +
housingMedianAge:population + housingMedianAge:households +
totalRooms:totalBedrooms + totalRooms:population + totalRooms:households +
totalRooms:medianIncome + totalBedrooms:population + totalBedrooms:households +
totalBedrooms:medianIncome + population:medianIncome, data =CAhousing_folds$train)
#map the RMSE calculations over the trained models and test sets simultaneously
errors<-map2_dbl(model_fit, CAhousing_folds$test, modelr::rmse)%>%mean()
print(errors)
#predictions
predicts=predict(model_fit, CAhousing_test)
df<-CAhousing_folds$test
plot_map = ggplot(df,
aes(x = longitude, y = latitude, fill = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude, fill = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
plot_map
model_fit=lm(medianHouseValue ~ longitude + latitude + housingMedianAge +
totalRooms + totalBedrooms + population + households + medianIncome +
longitude:latitude + longitude:housingMedianAge + longitude:totalRooms +
longitude:totalBedrooms + longitude:population + longitude:households +
longitude:medianIncome + latitude:housingMedianAge + latitude:totalRooms +
latitude:totalBedrooms + latitude:population + latitude:households +
latitude:medianIncome + housingMedianAge:totalBedrooms +
housingMedianAge:population + housingMedianAge:households +
totalRooms:totalBedrooms + totalRooms:population + totalRooms:households +
totalRooms:medianIncome + totalBedrooms:population + totalBedrooms:households +
totalBedrooms:medianIncome + population:medianIncome, data =CAhousing_train)
#predictions
predicts=predict(model_fit, CAhousing_test)
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude, fill = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
plot_map
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude, color = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
plot_map
#map the RMSE calculations over the trained models and test sets simultaneously
errors<-map2_dbl(model_fit, CAhousing_folds$test, modelr::rmse)%>%mean()
#map the RMSE calculations over the trained models and test sets simultaneously
errors<-map2_dbl(model_fit, CAhousing_test, modelr::rmse)%>%mean()
print(errors)
#map the RMSE calculations over the trained models and test sets simultaneously
errors<-map2_dbl(model_fit, CAhousing_test, modelr::rmse)%>%mean()
#map the RMSE calculations over the trained models and test sets simultaneously
errors<-map(model_fit, CAhousing_test, modelr::rmse)%>%mean()
#map the RMSE calculations over the trained models and test sets simultaneously
errors<-map(model_fit, CAhousing_test, modelr::rmse)
#predictions
predicts=predict(model_fit, CAhousing_test)
df<-CAhousing_folds$test
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude, color = predicts,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi=medianIncome)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted House Value (in $USD)", size = "Population")
plot_map
modelr::rmse(model_fit)
modelr::rmse(model_fit, green_train)
modelr::rmse(model_fit, CAhousing_train)
errors<-modelr::rmse(model_fit, CAhousing_train)
errors<-modelr::rmse(model_fit, CAhousing_test)
print(errors)
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude,
color = predicts - test_actual,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi = medianIncome)) +
geom_point(aes(size = abs(test_predictions2 - test_actual)), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Predicted Price Over / Under Actual Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted Price Over / Under (in $USD)",
size = "Magnitude of Price Difference")
plot_map
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude,
color = predicts - test_actual,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi = medianIncome)) +
geom_point(aes(size = abs(predicts - test_actual)), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Predicted Price Over / Under Actual Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted Price Over / Under (in $USD)",
size = "Magnitude of Price Difference")
plot_map
# the actual median house values from the test set
test_actual = CAhousing_test$medianHouseValue
# the predicted house values for the test set
predicts=predict(model_fit, CAhousing_test)
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude,
color = predicts - test_actual,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi = medianIncome)) +
geom_point(aes(size = abs(predicts - test_actual)), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Predicted Price Over / Under Actual Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted Price Over / Under (in $USD)",
size = "Magnitude of Price Difference")
plot_map
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude,
color = predicts - test_actual,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi = medianIncome)) +
geom_point(aes(size = abs(exp(predicts - test_actual))), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Predicted Price Over / Under Actual Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted Price Over / Under (in $USD)",
size = "Magnitude of Price Difference")
plot_map
plot_map = ggplot(CAhousing_test,
aes(x = longitude, y = latitude,
color = predicts - test_actual,
hma = housingMedianAge, tr = totalRooms, tb = totalBedrooms,
hh = households, mi = medianIncome)) +
geom_point(aes(size = abs(predicts - test_actual)), alpha = 0.5) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Predicted Price Over / Under Actual Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Predicted Price Over / Under (in $USD)",
size = "Magnitude of Price Difference")
plot_map
plot_map
#Load All libraries
knitr::opts_chunk$set(echo = FALSE,
cache = TRUE,
warning = FALSE,
message = FALSE)
library(knitr)
library(dplyr)
library(gridExtra)
library(ggplot2)
library(ggthemes)
library(cowplot)
library(moments)
library(caret)
library(glmnet)
library(kableExtra)
library(olsrr)
library(ggmap)
library(skimr)
library(RColorBrewer)
library(plotly)
library(readr)
library(caret)
library(lmtest)
library(nortest)
library(scales)
library(rsample)
library(rpart)
library(rpart.plot)
library(pls) # for PCA
library(textir) #needed for standardizing data
library(randomForest)
library(modelr)
library(purrr)
Crime = -11.058 + $\beta_{1}$*(High_Alert*District_1)+$\beta_{2}$*(High_Alert*District_other)+\$beta_{3}$*log(midday_ridership)+$\epselon$
Crime = -11.058 + $\beta_{1}(High_Alert*District_1)+\beta_{2}(High_Alert*District_other)+\beta_{3}log(midday_ridership)+\epsilon$
Crime = -11.058 + $beta_{1}(High_Alert*District_1)+beta_{2}(High_Alert*District_other)+beta_{3}log(midday_ridership)+epsilon$
Crime=$-11.058+\beta_{1}(High_Alert*District_1)+\beta_{2}(High_Alert*District_other)+\beta_{3}log(midday_ridership)+\epsilon$
$$Crime=-11.058+\beta_1(High_Alert*District_1)+\beta_2(High_Alert*District_other)+\beta_3log(midday_ridership)+\epsilon$$
$$Crime=-11.058+\beta_1(High_Alert*District_1)+\beta_2(High_Alert*District_other)+\beta_3\log(midday_ridership)+\epsilon$$
$Crime=-11.058+\beta_1(High_Alert*District_1)+\beta_2(High_Alert*District_other)+\beta_3\log(midday_ridership)+\epsilon$
$Crime=-11.058+\beta_1(High_Alert*District_1)+\beta_2(High_Alert*District_0)+\beta_3\log(midday_ridership)+\epsilon$
$Crime=-11.058+\beta_1\(High_Alert*District_1)+\beta_2\(High_Alert*District_0)+\beta_3\log(midday_ridership)+\epsilon$
Crime=\beta_1\(High_Alert*District_1)+\beta_2\(High_Alert*District_0)+\beta_3\log(midday_ridership)+\epsilon$
$Crime=b_0+b_1(High_Alert*District_1)+b_2(High_Alert*District_0)+b_3log(midday_ridership)+e$
$$Crime=b_0+b_1(High_Alert*District_1)+b_2(High_Alert*District_0)+b_3log(midday_ridership)+e$$
$$
$$
Crime=\b_0+\b_1(High_Alert*\District_1)+\b_2(High_Alert*\District_0)+\b_3\log(midday_ridership)+\e
$Crime=\b_0+\b_1(High_Alert*\District_1)+\b_2(High_Alert*\District_0)+\b_3\log(midday_ridership)+\e$
