{"frames":[{"func":"lm_workflow %>% tune_grid(resamples = housing_vfold, grid = spline_grid)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tune_grid(., resamples = housing_vfold, grid = spline_grid)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tune_grid.workflow(., resamples = housing_vfold, grid = spline_grid)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tune_grid_workflow(object, resamples = resamples, grid = grid, \n    metrics = metrics, pset = param_info, control = control)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tune_grid_loop(resamples = resamples, grid = grid, workflow = workflow, \n    metrics = metrics, control = control, rng = rng)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"suppressPackageStartupMessages(results <- foreach::foreach(iteration = iterations, \n    seed = seeds, .packages = packages, .errorhandling = \"pass\") %op% \n    {\n        tune_grid_loop_iter_safely(iteration = iteration, resamples = resamples,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers(expr, packageStartupMessage = function(c) tryInvokeRestart(\"muffleMessage\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"foreach::foreach(iteration = iterations, seed = seeds, .packages = packages, \n    .errorhandling = \"pass\") %op% {\n    tune_grid_loop_iter_safely(iteration = iteration, resamples = resamples, \n        grid_info = grid_info, workflow = workflow, metrics = metrics,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"e$fun(obj, substitute(ex), parent.frame(), e$data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch({\n    repeat {\n        args <- nextElem(it)\n        if (obj$verbose) { ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(eval(xpr, envir = envir), error = function(e) e)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(xpr, envir = envir)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(xpr, envir = envir)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tune_grid_loop_iter_safely(iteration = iteration, resamples = resamples, \n    grid_info = grid_info, workflow = workflow, metrics = metrics, \n    control = control, seed = seed)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval_tidy(call, mask)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (fn, iteration, resamples, grid_info, workflow, metrics, \n    control, seed) \n{\n    safely_iterate <- super_safely(fn) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"safely_iterate(iteration, resamples, grid_info, workflow, metrics, \n    control, seed)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers(expr = tryCatch(expr = list(result = fn(...), \n    error = NULL, warnings = warnings), error = handle_error), \n    warning = handle_warning)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(expr = list(result = fn(...), error = NULL, warnings = warnings), \n    error = handle_error)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"fn(...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"catch_and_log(.expr = .fit_pre(workflow, training), control, \n    split, iter_msg_preprocessor, notes = out_notes)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"catcher(.expr)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"try(withCallingHandlers(warning = add_cond, expr), silent = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers(warning = add_cond, expr)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".fit_pre(workflow, training)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"fit(action, workflow = workflow, data = data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"fit.action_recipe(action, workflow = workflow, data = data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"hardhat::mold(recipe, data, blueprint = blueprint)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mold.recipe(recipe, data, blueprint = blueprint)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"run_mold(blueprint, data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"run_mold.recipe_blueprint(blueprint, data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"blueprint$mold$process(blueprint = blueprint, data = data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recipes::prep(blueprint$recipe, training = data, fresh = blueprint$fresh)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"prep.recipe(blueprint$recipe, training = data, fresh = blueprint$fresh)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"merge_term_info(get_types(training), x$term_info)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".new %>% dplyr::rename(new_type = type) %>% dplyr::left_join(.old, \n    by = \"variable\") %>% dplyr::mutate(type = ifelse(is.na(type), \n    \"other\", \"type\"), type = ifelse(type != new_type, new_type, \n    type)) %>% dplyr::select(-new_type)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"dplyr::select(., -new_type)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"dplyr::mutate(., type = ifelse(is.na(type), \"other\", \"type\"), \n    type = ifelse(type != new_type, new_type, type))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"dplyr::left_join(., .old, by = \"variable\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"left_join.data.frame(., .old, by = \"variable\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"join_mutate(x, y, by = by, type = \"left\", suffix = suffix, na_matches = na_matches, \n    keep = keep)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"join_rows(x_key, y_key, type = type, na_equal = na_equal)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"arg_match(type)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"caller_fn()","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"with_options(lifecycle_disable_warnings = TRUE, call_frame(n + \n    2)$fn)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"call_frame(n + 2)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"new_frame(list(pos = pos, caller_pos = trail[n + 1], expr = sys.call(pos), \n    env = sys.frame(pos), fn = sys.function(pos), fn_name = call_name(sys.call(pos))))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"structure(x, class = \"frame\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"call_name(sys.call(pos))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"is_call(call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in base::try(ols_step, TRUE) : object 'ols_step' not found\n"}